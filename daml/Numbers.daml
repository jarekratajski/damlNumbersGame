module Numbers where

import DA.List
--import DA.Optional

data Bet = Bet {player: Party, number: Int} deriving (Show, Eq)

secondBest : [Bet]->Optional Bet
secondBest [] = None
secondBest [bet] = Some bet
secondBest list = Some $ reverse sorted  !! 1
    where
      sorted = sortBy (\b1 b2 -> if b1.number > b2.number then GT else if b1.number < b2.number then LT else EQ) list


template Proposal with
    player : Party
    dealer : Party
    number : Int
  where
     signatory player
     observer dealer
     choice Accept : (ContractId Game) with
          game: ContractId Game
        controller dealer
        do
        exercise game Append with
          proposal = this

template Game with
    dealer: Party
    numbers: [Bet]
 where
    signatory dealer
    observer  (\x -> x.player) <$> numbers
    choice Append :(ContractId Game) with
        proposal : Proposal
      controller dealer
      do
      create Game with
        numbers = Bet {player = proposal.player, number = proposal.number} :: this.numbers
        dealer = this.dealer
    choice Decide: (ContractId Result)
      controller dealer
      do
      create Result with
        winner = secondBest numbers
        all = numbers
        dealer = dealer


template Result with
    winner: Optional Bet
    all: [Bet]
    dealer: Party
  where
    observer  (\x -> x.player) <$> all
    signatory dealer
